
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)
from collections import defaultdict, deque
from datetime import datetime, timedelta
import random
import pickle
from pathlib import Path
import logging
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(name)

TOKEN = ".........."
DATA_FILE = "bot_data.pkl"
CHANNEL_LINK = "https://t.me/+s8nALxPQZ5QwYmEy"
KOREAN_BOT_LINK = "http://t.me/koreanchickbot"
TIMEZONE = pytz.timezone('Europe/Moscow')

WORDS = [
    "–∞–π–¥–æ–ª", "–∞–º–±–∞—Ä", "–∞—Ä–±—É–∑", "–∞—Ç–ª–∞—Å", "–±–∞–ª–µ—Ç", "–±–∞–Ω–∞–Ω", "–±–∞–∑–∞—Ä", "–±–µ—Ä–µ–≥", "–±–µ—Ç–æ–Ω", "–±–∏–¥–æ–Ω",
    "–±–∏–ª–µ—Ç", "–±–∏—Ä–∂–∞", "–±–∏—Å–µ—Ä", "–±–æ–≥–∞—á", "–±–æ–∫–∞–ª", "–±–æ–Ω—É—Å", "–±–æ—á–∫–∞", "–±–æ—Ä–µ—Ü", "–±—Ä–µ–Ω–¥", "–±—Ä–æ–Ω—è",
    "–±—Ä–æ–Ω—Ö", "–±—Ä–µ–º—è", "–±—É–∫–≤–∞", "–±—É–∫–µ—Ç", "–≤–∞–ª–∏–∫", "–≤–µ–Ω–æ–∫", "–≤–µ—Å–ª–æ", "–≤–µ—Å–Ω–∞", "–≤–µ—Ç–µ—Ä", "–≤–∑–Ω–æ—Å",
    "–≤–∑—Ä—ã–≤", "–≤–∏—Ä—É—Å", "–≤–æ–∂–∞–∫", "–≥–∞–∑–æ–Ω", "–≥–ª–∏–Ω–∞", "–≥–æ–Ω–∫–∞", "–≥—Ä–∞–Ω—Ç", "–≥—Ä–æ–∑–∞", "–≥—Ä—É—à–∞", "–¥–≤–µ—Ä—å",
    "–¥–µ—Å–Ω–∞", "–¥–æ—Å–∫–∞", "–¥–æ–∂–¥—å", "–∑–∞–±–æ—Ä", "–∑–∞–≤–æ–¥", "–∑–∞–ª–æ–≥", "–∑–≤–µ—Ä—å", "–∑–µ–±—Ä–∞", "–∑–Ω–∞–º—è", "–∏–≥—Ä–æ–∫",
    "–∏–∫–æ–Ω–∞", "–∏–Ω–∂–∏—Ä", "–∏—Å–∫—É—Å", "–∫–∞–±–∞–Ω", "–∫–∞–ø–ª—è", "–∫–∞—Ä—Ç–∞", "–∫–∞—Å—Å–∞", "–∫–∏–º—á–∏", "–∫–ª–∞—Å—Å", "–∫–ª–∏—à–µ",
    "–∫–Ω–∏–≥–∞", "–∫–Ω—è–∑—å", "–∫–æ–≤–µ—Ä", "–∫—Ä—ã—à–∞", "–∫—É–∫—Å—É", "–∫—É–ø–æ–ª", "–ª–∞–º–ø–∞", "–ª–µ–Ω—Ç–∞", "–ª–∏–∞–Ω–∞", "–ª–∏–Ω–∏—è",
    "–ª–∏—à–∞–π", "–º–∞—Å–∫–∞", "–º–µ—Å—Ç–æ", "–º–µ—à–æ–∫", "–º–æ–ª–æ—Ç", "–Ω–æ—Ä–º–∞", "–æ–±–º–µ–Ω", "–æ–±—Ä–∞–∑", "–æ–∫—Ä—É–≥", "–æ–ø–ª–æ—Ç",
    "–æ—Å–µ–Ω—å", "–æ—Ç–µ–ª—å", "–æ—Ç—Ä—è–¥", "–ø–∞–∫–µ—Ç", "–ø–∞–ª–∫–∞", "–ø–∞—Ä—É—Å", "–ø–∞—Ä–æ–º", "–ø–µ—Å–æ–∫", "–ø–µ—á–∫–∞", "–ø–µ—Å–Ω—è",
    "–ø–ª–∞—Ç–æ", "–ø–æ–≤–∞—Ä", "–ø–æ–ª—ë—Ç", "–ø–æ–ª–∫–∞", "–ø–æ—Ä–æ—Ö", "–ø—Ç–∏—Ü–∞", "–ø—É–ª—å—Ç", "—Ä–∞–π–æ–Ω", "—Ä–∞–º–∫–∞", "—Ä–µ–∑–µ—Ü",
    "—Ä–æ–¥–Ω—è", "—Ä—É—á–∫–∞", "—Å–µ—Ç–∫–∞", "—Å—Ñ–µ—Ä–∞", "—Å—Ç–æ–ª–±", "—Å—É–º–∫–∞", "—Ñ–æ–∫—É—Å", "—Ñ–æ—Ä–º–∞", "—Ñ–∏–ª—å–º", "—á–∞–π–∫–∞",
    "—â–∏—Ç–æ–∫", "–∫–æ—à–∫–∞", "—Ö–∞—É—Å–∏", "—Å–ª–æ–Ω—ã", "–∑–º–µ—è", "—Ñ–ª–∞–≥"
]

class GameData:
    def init(self):
        self.user_words = defaultdict(deque)
        self.game_stats = defaultdict(lambda: {
            "games_played": 0,
            "wins": 0,
            "current_streak": 0,
            "max_streak": 0,
            "last_win": None,
            "username": None,
            "first_name": None,
            "words_guessed": []
        })
        self.admin_stats = {
            "total_games": 0,
            "games_history": [],
            "last_update": datetime.now(TIMEZONE),
            "all_words": WORDS.copy()
        }
    
    @classmethod
    def load(cls):
        try:
            if Path(DATA_FILE).exists():
                with open(DATA_FILE, "rb") as f:
                    return pickle.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return cls()
    
    def save(self):
        try:
            with open(DATA_FILE, "wb") as f:
                pickle.dump(self, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
bot_data = GameData.load()
active_games = {}

def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='start_game')],
        [InlineKeyboardButton("üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data='my_stats')],
        [InlineKeyboardButton("‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å", callback_data='help')],
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("ü•¢–í–∫—É—Å–Ω–∞—è –ø–∞—É–∑–∞", url=KOREAN_BOT_LINK)]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    bot_data.game_stats[user.id]["username"] = user.username
    bot_data.game_stats[user.id]["first_name"] = user.first_name
    bot_data.save()
    
    await update.message.reply_text(
        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´5 –±—É–∫–≤¬ª!\n"
        "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫üëá",
        reply_markup=get_main_menu()
    )

VizoraX, [16.08.2025 9:11]
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´5 –±—É–∫–≤¬ª!\n"
        "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫üëá",
        reply_markup=get_main_menu()
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start_game':
        await start_game(update, context)
    elif query.data == 'my_stats':
        await show_stats(update, context)
    elif query.data == 'help':
        await show_help(update, context)

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    
    if user_id in active_games:
        await query.edit_message_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ 5 –±—É–∫–≤.")
        return
    
    # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if not bot_data.user_words[user_id]:
        words = bot_data.admin_stats["all_words"].copy()
        random.shuffle(words)
        bot_data.user_words[user_id] = deque(words)
    
    current_word = bot_data.user_words[user_id][0]
    active_games[user_id] = {
        "word": current_word,
        "attempts": [],
        "max_attempts": 6
    }
    
    bot_data.game_stats[user_id]["games_played"] += 1
    bot_data.admin_stats["total_games"] += 1
    bot_data.admin_stats["last_update"] = datetime.now(TIMEZONE)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
    bot_data.game_stats[user_id]["username"] = user.username
    bot_data.game_stats[user_id]["first_name"] = user.first_name
    
    bot_data.save()
    
    await query.edit_message_text(
        f"üî† –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£ —Ç–µ–±—è {active_games[user_id]['max_attempts']} –ø–æ–ø—ã—Ç–æ–∫.\n"
        "–ü—Ä–∏—Å—ã–ª–∞–π —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤:"
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    help_text = (
        "‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "1. –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'\n"
        "2. –ü—Ä–∏—Å—ã–ª–∞–π —Å–ª–æ–≤–∞ –∏–∑ 5 —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤\n"
        "3. –ë–æ—Ç –¥–∞—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏:\n"
        "   ‚úÖ - –±—É–∫–≤–∞ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ\n"
        "   üîÑ - –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ç–∞–º\n"
        "   ‚ùå - –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–°–ª–æ–≤–æ: –ö–û–®–ö–ê\n"
        "–¢—ã: –ö–ê–®–ü–û\n"
        "–ë–æ—Ç: –ü–æ–ø—ã—Ç–∫–∞ 1/6:\n"
        "–ö –ê –® –ü –û\n"
        "‚úÖ üîÑ ‚úÖ ‚ùå üîÑ\n\n"
        "–¢—ã: –ö–û–®–ö–ê\n"
        "–ë–æ—Ç: üéâ –ü–æ–±–µ–¥–∞!"
    )
    await query.edit_message_text(help_text, reply_markup=get_main_menu())

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    stats = bot_data.game_stats[user_id]
    
    win_rate = (stats["wins"] / stats["games_played"] * 100) if stats["games_played"] > 0 else 0
    last_win = stats["last_win"].astimezone(TIMEZONE).strftime("%d.%m.%Y %H:%M") if stats["last_win"] else "–µ—â–µ –Ω–µ –±—ã–ª–æ"
    period = bot_data.admin_stats["last_update"].astimezone(TIMEZONE).strftime("%d.%m.%Y %H:%M")
    
    stats_text = (
        f"üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {period}):\n"
        f"‚Ä¢ –ò–≥—Ä: {stats['games_played']}\n"
        f"‚Ä¢ –ü–æ–±–µ–¥: {stats['wins']} ({win_rate:.1f}%)\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats['current_streak']}\n"
        f"‚Ä¢ –ú–∞–∫—Å. —Å–µ—Ä–∏—è: {stats['max_streak']}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–±–µ–¥–∞: {last_win}"
    )
    await query.edit_message_text(stats_text, reply_markup=get_main_menu())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    text = update.message.text.strip().lower()
    
    if user_id not in active_games:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω—é (/start).")

VizoraX, [16.08.2025 9:11]
return
    
    game = active_games[user_id]
    
    if len(text) != 5 or not text.isalpha() or not all(letter in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for letter in text):
        await update.message.reply_text("–ù—É–∂–Ω–æ —Å–ª–æ–≤–æ –∏–∑ 5 —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤!")
        return
    
    if text in game["attempts"]:
        await update.message.reply_text("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ!")
        return
    
    game["attempts"].append(text)
    result = analyze_attempt(text, game["word"])
    attempt_num = len(game["attempts"])
    
    if text == game["word"]:
        stats = bot_data.game_stats[user_id]
        stats["wins"] += 1
        stats["current_streak"] += 1
        stats["max_streak"] = max(stats["max_streak"], stats["current_streak"])
        stats["last_win"] = datetime.now(TIMEZONE)
        stats["words_guessed"].append(game["word"])
        
        bot_data.user_words[user_id].popleft()
        bot_data.admin_stats["last_update"] = datetime.now(TIMEZONE)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
        bot_data.admin_stats["games_history"].append({
            "user_id": user_id,
            "username": user.username,
            "first_name": user.first_name,
            "word": game["word"],
            "is_win": True,
            "attempts": attempt_num,
            "timestamp": datetime.now(TIMEZONE)
        })
        
        bot_data.save()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        last_attempt = (
            f"–ü–æ–ø—ã—Ç–∫–∞ {attempt_num}/{game['max_attempts']}:\n"
            f"{' '.join(text.upper())}\n"
            f"{' '.join(result)}"
        )
        
        win_text = (
            f"üéâ –ü–æ–±–µ–¥–∞! –°–ª–æ–≤–æ: {game['word'].upper()}\n"
            f"–ü–æ–ø—ã—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {attempt_num}\n\n"
            f"{last_attempt}\n\n"
            f"–•–æ—á–µ—à—å –æ—Ç–≥–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ?üëÄ\n"
            f"–ñ–º–∏ /start"
        )
        
        await update.message.reply_text(win_text)
        del active_games[user_id]
        return
    
    if attempt_num >= game["max_attempts"]:
        bot_data.game_stats[user_id]["current_streak"] = 0
        bot_data.admin_stats["last_update"] = datetime.now(TIMEZONE)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
        bot_data.admin_stats["games_history"].append({
            "user_id": user_id,
            "username": user.username,
            "first_name": user.first_name,
            "word": game["word"],
            "is_win": False,
            "attempts": attempt_num,
            "timestamp": datetime.now(TIMEZONE)
        })
        
        bot_data.save()
        
        lose_text = (
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—åüòî\n"
            f"–°–ª–æ–≤–æ –±—ã–ª–æ: {game['word'].upper()}\n\n"
            f"–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–≥–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ?üëÄ\n"
            f"–ñ–º–∏ /start"
        )
        
        await update.message.reply_text(lose_text)
        del active_games[user_id]
        return
    
    attempt_text = (
        f"–ü–æ–ø—ã—Ç–∫–∞ {attempt_num}/{game['max_attempts']}:\n"
        f"{' '.join(text.upper())}\n"
        f"{' '.join(result)}"
    )
    
    await update.message.reply_text(attempt_text)

def analyze_attempt(attempt: str, target_word: str) -> list:
    result = ['‚ùå'] * 5
    target_letters = list(target_word)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for i in range(5):
        if attempt[i] == target_letters[i]:
            result[i] = "‚úÖ"
            target_letters[i] = None
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—É–∫–≤—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    for i in range(5):
        if result[i] == "‚úÖ":
            continue
        if attempt[i] in target_letters:
            result[i] = "üîÑ"
            target_letters[target_letters.index(attempt[i])] = None
    
    return result

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        last_update = bot_data.admin_stats["last_update"].astimezone(TIMEZONE).strftime("%d.%m.%Y %H:%M")

VizoraX, [16.08.2025 9:11]
total_games = bot_data.admin_stats["total_games"]
        unique_players = len(bot_data.game_stats)
        avg_games = total_games / unique_players if unique_players > 0 else 0
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {last_update}):\n\n"
            f"- –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
            f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {unique_players}\n"
            f"- –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {avg_games:.1f}\n\n"
            f"–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
        )
        
        top_players = sorted(
            bot_data.game_stats.items(),
            key=lambda x: (x[1]["wins"], x[1]["games_played"]),
            reverse=True
        )
        
        for i, (user_id, stats) in enumerate(top_players, 1):
            username = f"@{stats['username']}" if stats["username"] else stats["first_name"] or f"ID {user_id}"
            stats_text += (
                f"{i}. {username}\n"
                f"–£–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ - {stats['wins']}\n"
                f"–í—Å–µ–≥–æ –∏–≥—Ä - {stats['games_played']}\n\n"
            )
            if i >= 10:
                break
        
        await update.message.reply_text(stats_text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def stats_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_filter = datetime.now(TIMEZONE) - timedelta(days=30)
        recent_games = [g for g in bot_data.admin_stats["games_history"] if g["timestamp"] >= time_filter]
        
        total_games = len(recent_games)
        unique_players = len({g["user_id"] for g in recent_games})
        wins = sum(1 for g in recent_games if g["is_win"])
        win_rate = (wins / total_games * 100) if total_games > 0 else 0
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞ 30 –¥–Ω–µ–π:\n\n"
            f"- –ò–≥—Ä: {total_games}\n"
            f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {unique_players}\n"
            f"- –ü–æ–±–µ–¥: {wins} ({win_rate:.1f}%)\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä:\n"
        )
        
        for i, game in enumerate(reversed(recent_games[-10:]), 1):
            username = f"@{game['username']}" if game["username"] else game["first_name"] or f"ID {game['user_id']}"
            status = "–ü–æ–±–µ–¥–∞" if game["is_win"] else "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
            stats_text += (
                f"{i}. {username}: {game['word'].upper()} - {status} "
                f"({game['attempts']} –ø–æ–ø—ã—Ç–æ–∫, {game['timestamp'].strftime('%d.%m %H:%M')})\n"
            )
        
        await update.message.reply_text(stats_text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def period_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args or len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /period_stats –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        
        start_date = datetime.strptime(context.args[0], "%d.%m.%Y").replace(tzinfo=TIMEZONE)
        end_date = datetime.strptime(context.args[1], "%d.%m.%Y").replace(tzinfo=TIMEZONE) + timedelta(days=1)
        
        period_games = [
            g for g in bot_data.admin_stats["games_history"]
            if start_date <= g["timestamp"] <= end_date
        ]
        
        total_games = len(period_games)
        unique_players = len({g["user_id"] for g in period_games})
        wins = sum(1 for g in period_games if g["is_win"])
        win_rate = (wins / total_games * 100) if total_games > 0 else 0
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {context.args[0]} - {context.args[1]}:\n\n"
            f"- –ò–≥—Ä: {total_games}\n"
            f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {unique_players}\n"
            f"- –ü–æ–±–µ–¥: {wins} ({win_rate:.1f}%)\n\n"
            f"–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"

VizoraX, [16.08.2025 9:11]
)
        
        player_stats = defaultdict(lambda: {"wins": 0, "games": 0})
        for game in period_games:
            player_stats[game["user_id"]]["games"] += 1
            if game["is_win"]:
                player_stats[game["user_id"]]["wins"] += 1
        
        sorted_players = sorted(
            player_stats.items(),
            key=lambda x: (x[1]["wins"], x[1]["games"]),
            reverse=True
        )
        
        for i, (user_id, stats) in enumerate(sorted_players, 1):
            user_info = next(
                (g for g in reversed(period_games) if g["user_id"] == user_id),
                {"username": None, "first_name": None}
            )
            username = f"@{user_info['username']}" if user_info["username"] else user_info["first_name"] or f"ID {user_id}"
            stats_text += (
                f"{i}. {username}\n"
                f"–£–≥–∞–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ - {stats['wins']}\n"
                f"–í—Å–µ–≥–æ –∏–≥—Ä - {stats['games']}\n\n"
            )
            if i >= 10:
                break
        
        await update.message.reply_text(stats_text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", show_menu))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –°–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–µ–Ω—é)
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("stats_channel", stats_channel))
    application.add_handler(CommandHandler("period_stats", period_stats))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if name == "main":
    main()